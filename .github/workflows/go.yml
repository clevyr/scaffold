name: Go

on: push

jobs:

  draft-release:
    name: Draft Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    continue-on-error: true
    steps:

    - name: Get Short Ref
      id: short-ref
      run: |
        echo "::set-output name=ref::${GITHUB_REF##*/}"

    - name: Draft Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ steps.short-ref.outputs.ref }}
        prerelease: true


  build:
    name: Build ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: ['linux', 'darwin']
        arch: ['amd64']
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.14
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Install pkger
      run: go get github.com/markbates/pkger/cmd/pkger

    - name: Get dependencies
      run: go mod download

    - name: Generate
      run: go generate -v .

    - name: Build
      run: go build -v -ldflags='-w -s' -o scaffold .
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: scaffold-${{ matrix.os }}-${{ matrix.arch }}
        path: scaffold

    - name: Archive Build
      if: startsWith(github.ref, 'refs/tags/v')
      run: tar -czvf scaffold.tar.gz scaffold

    - name: Get Release Upload URL
      id: upload-url
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        tag=${GITHUB_REF##*/}
        printf "::set-output name=url::%s" "$(hub release show -f %uA "$tag")"

    - name: Upload a Release Asset
      uses: actions/upload-release-asset@v1
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.upload-url.outputs.url }}
        asset_path: scaffold.tar.gz
        asset_name: scaffold-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
        asset_content_type: application/x-gzip


